demo(graphics)
data()
data(CO2)
data()
data()
Nile
CO2
plot
plot()
plot(CO2)
plot(Nile)
plot(CO2)
data()
plot(UKDriverDeaths )
chicks
data(chicks)
data(ChickWeight)
plot(ChickWeight)
ChickWeight
colnames(ChickWeight)
ChickWeight$Diet
ChickWeight$Time
plot(ChickWeight$Time)
plot(ChickWeight$Weight$ChickWeight$Time)
plot(ChickWeight$Weight,ChickWeight$Time)
q()
demo()
Nile
plot(Nile)
ls()
# Look at some data sets (as we did before RStudio)
data()
hist(Nile)
mean(Nile)
help(Nile)
# Look at some data sets (as we did before RStudio)
data()
# Look at some data sets (as we did before RStudio)
data()
x <- "Hello world"
# Now try calling x.
x
# And see what happens when we call the ls() function again.
ls()
# R calculates stuff, e.g., add 2 and 2
2 + 2
x <- "that line"
# Now try calling x.
x
x <- "Hello world"
# Now try calling x.
x
# Now try calling x.
x
print(x)
# Now try calling x.
x
print(x)
x
print(x)
print(x)
x
print(x)
x <- "Hello world"
x <- "that line"
x
print(x)
view()
View()
View(Nile)
view(Nile)
View(Nile)
plot(nile)
plot(Nile)
plot(ChickWeight)
class(ChickWeight)
plot(ChickWeight)
class(Nile)
# Create 7 random numbers between 0 and 1
runif(7)
# And see what happens when we call the ls() function again.
ls()
z
# R allows for two different versions to assign a value to a name
z <- 2 + 2 #better way
z
z = 2 + 2
z
z = 2 + 2+2
# "c" stands for concatenate so "y" here stores the values 1, 2 and 4.
y <- c(1, 2, 4)
#Parts of individual objects can be accessed via square brackets
y[3]
sqrt(962)
answer <- sqrt(862)
answer
answer <- sqrt(962)
answer
answer * 2
rm(list = ls())
x <- "Hello world"
x[1]
x <- "Hello\,world"
x <- "Hello,world"
x[1]
x <- "Helloworld","haha"
x <- ("Helloworld","haha")
x <- ["Helloworld","haha"]
# Extract the element named gamma from the vector below.
vec2 <- c(alpha = 1, beta = 2, gamma = 3)
vec2
plot(vec2)
xc<-gamma
xc
xc<- 200:290:5
xc<- 200:290
xc
xc<- 200:290:2
xc
xc<- 200:290:-1
xc
xc<- 200:290
xc
x <- rnorm(n = 50)
plot(x)
x <- runiform(n = 50)
x <- runi(n = 50)
x <- runif(n = 50)
plot(x)
x <- rnorm(n = 50)
plot(x)
x <- runif(n = 50)
plot(x)
x <- rnorm(n = 50)
plot(x)
x <- rnorm(n = 5000)
plot(x)
x <- rnorm(n = 50000)
plot(x)
x <- rnorm(n = 15000)
plot(x)
mtcars
plot(mtcars$cyl,mtcars$hp)
y <- x
y <- 2*y
xylm <- lm(y~x)
xylm
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
jupyter kernelspec --version
jupyter kernel --version
q()
legend("topright", legend = c("R_1 Mean", "R_2 Mean", "R_3 Mean", "R_4 Mean"), col = c("red", "blue", "green", "black"), pch = 1)
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
library(ggplot2)
lapply(c(),  pkgTest)
setwd("D:/GitHubSpace/StatsI_Fall2023/problemSets/PS01/my_answers")
y <- c(105, 69, 86, 100,82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
#####Question 1
n <- length(y)
sample_mean <- mean(y)
sample_sd <- sd(y)
#step-by-step method
t_score <- qt(1-(1-0.9)/2,df<- length(y)-1)
lower_90_t <- mean(y) - (t_score)*(sd(y)/sqrt(length(y)))
higher_90_t <- mean(y) + (t_score)*(sd(y)/sqrt(length(y)))
#quicker method
t.test(y,conf.level = 0.9 , alternative = "two.sided")
#answer
CI <- c(lower_90_t,higher_90_t)
CI
t.test(y, mu = 100,  alternative = "greater")
expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2023/main/datasets/expenditure.txt", header=T)
#####Question 1
str(expenditure[c("Y", "X1", "X2", "X3")])
pdf(file="Y-X1_X2_X3_Relationship_Plot.pdf")
plot(expenditure[c("Y", "X1", "X2", "X3")])
dev.off()
cor(expenditure$Y,expenditure$X1)
cor(expenditure$Y,expenditure$X2)
cor(expenditure$Y,expenditure$X3)
cor(expenditure$X2,expenditure$X3)
cor(expenditure$X1,expenditure$X3)
cor(expenditure$X2,expenditure$X3)
#####Question 2
pdf(file="Y-Region_Relationship_Plot.pdf")
plot(expenditure[c("Y","Region")])
str(expenditure)
R_1 <- expenditure[expenditure$Region == 1, ]
R_2 <- expenditure[expenditure$Region == 2, ]
R_3 <- expenditure[expenditure$Region == 3, ]
R_4 <- expenditure[expenditure$Region == 4, ]
t.test(R_1$Y,conf.level = 0.95 , alternative = "two.sided")
t.test(R_2$Y,conf.level = 0.95 , alternative = "two.sided")
t.test(R_3$Y,conf.level = 0.95 , alternative = "two.sided")
t.test(R_4$Y,conf.level = 0.95 , alternative = "two.sided")
abline(v=mean(R_1$Y),col="red")
abline(v=mean(R_2$Y),col="blue")
abline(v=mean(R_3$Y),col="green")
abline(v=mean(R_4$Y),col="black")
legend("topright", legend = c("R_1 Mean", "R_2 Mean", "R_3 Mean", "R_4 Mean"),pitch = c("1","1","1","1"), col = c("red", "blue", "green", "black"), pch = 1)
legend("topright", legend = c("R_1 Mean", "R_2 Mean", "R_3 Mean", "R_4 Mean"),pch = c("1","1","1","1"), col = c("red", "blue", "green", "black"), pch = 1)
legend("topright", legend = c("R_1 Mean", "R_2 Mean", "R_3 Mean", "R_4 Mean"),pch = c(1,1,1,1), col = c("red", "blue", "green", "black"), pch = 1)
legend("topright", legend = c("R_1 Mean", "R_2 Mean", "R_3 Mean", "R_4 Mean"),pch = 1, col = c("red", "blue", "green", "black"), pch = 1)
legend("topright", legend = c("R_1 Mean", "R_2 Mean", "R_3 Mean", "R_4 Mean"),pch = c(1,1,1,1), col = c("red", "blue", "green", "black"), pch = 1)
legend("topright", legend = c("R_1 Mean", "R_2 Mean", "R_3 Mean", "R_4 Mean"),pch = 1, col = c("red", "blue", "green", "black"), pch = 1)
legend("topright", legend = c("R_1 Mean", "R_2 Mean", "R_3 Mean", "R_4 Mean"), col = c("red", "blue", "green", "black"), pch = 1)
#####Question 2
pdf(file="Y-Region_Relationship_Plot.pdf")
plot(expenditure[c("Y","Region")])
str(expenditure)
R_1 <- expenditure[expenditure$Region == 1, ]
R_2 <- expenditure[expenditure$Region == 2, ]
R_3 <- expenditure[expenditure$Region == 3, ]
R_4 <- expenditure[expenditure$Region == 4, ]
t.test(R_1$Y,conf.level = 0.95 , alternative = "two.sided")
t.test(R_2$Y,conf.level = 0.95 , alternative = "two.sided")
t.test(R_3$Y,conf.level = 0.95 , alternative = "two.sided")
t.test(R_4$Y,conf.level = 0.95 , alternative = "two.sided")
abline(v=mean(R_1$Y),col="red")
abline(v=mean(R_2$Y),col="blue")
abline(v=mean(R_3$Y),col="green")
abline(v=mean(R_4$Y),col="black")
legend("topright", legend = c("R_1 Mean", "R_2 Mean", "R_3 Mean", "R_4 Mean"), col = c("red", "blue", "green", "black"), pch = 1)
dev.off()
legend("topright", legend = c("R_1 Mean", "R_2 Mean", "R_3 Mean", "R_4 Mean"), col = c("red", "blue", "green", "black"), lty = 1)
legend("topright", legend = c("R_1 Mean", "R_2 Mean", "R_3 Mean", "R_4 Mean"), col = c("red", "blue", "green", "black"),pch = 1)
#####Question 2
pdf(file="Y-Region_Relationship_Plot.pdf")
plot(expenditure[c("Y","Region")])
str(expenditure)
R_1 <- expenditure[expenditure$Region == 1, ]
R_2 <- expenditure[expenditure$Region == 2, ]
R_3 <- expenditure[expenditure$Region == 3, ]
R_4 <- expenditure[expenditure$Region == 4, ]
t.test(R_1$Y,conf.level = 0.95 , alternative = "two.sided")
t.test(R_2$Y,conf.level = 0.95 , alternative = "two.sided")
t.test(R_3$Y,conf.level = 0.95 , alternative = "two.sided")
t.test(R_4$Y,conf.level = 0.95 , alternative = "two.sided")
abline(v=mean(R_1$Y),col="red")
abline(v=mean(R_2$Y),col="blue")
abline(v=mean(R_3$Y),col="green")
abline(v=mean(R_4$Y),col="black")
legend("topright", legend = c("R_1 Mean", "R_2 Mean", "R_3 Mean", "R_4 Mean"), col = c("red", "blue", "green", "black"),lty=1 )
dev.off()
t.test(y, mu = 100,  alternative = "greater")
#p_value == 0.7215 > 0.05, null hypothesis rejected.
se <- sample_sd/sqrt(n-1)
t-value <- (mean(y)-100)/(se)
p <- pt(t-value)
y <- c(105, 69, 86, 100,82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
#####Question 1
n <- length(y)
sample_mean <- mean(y)
sample_sd <- sd(y)
#step-by-step method
t_score <- qt(1-(1-0.9)/2,df<- length(y)-1)
lower_90_t <- mean(y) - (t_score)*(sd(y)/sqrt(length(y)))
higher_90_t <- mean(y) + (t_score)*(sd(y)/sqrt(length(y)))
#quicker method
t.test(y,conf.level = 0.9 , alternative = "two.sided")
#answer
CI <- c(lower_90_t,higher_90_t)
CI
t.test(y, mu = 100,  alternative = "greater")
#p_value == 0.7215 > 0.05, null hypothesis rejected.
se <- sample_sd/sqrt(n-1)
t-value <- (mean(y)-100)/(se)
t_value <- (mean(y)-100)/(se)
p <- pt(t_value)
p <- pt(t_value,df = n-1)
#p_value == 0.7215 > 0.05, null hypothesis rejected.
se <- sample_sd/sqrt(n)
t_value <- (mean(y)-100)/(se)
p <- pt(t_value,df = n-1)
p+0.7215
p <- pt(t_value,df = n-1,lower.tail = FALSE)
y <- c(105, 69, 86, 100,82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
#####Question 1
n <- length(y)
sample_mean <- mean(y)
sample_sd <- sd(y)
#step-by-step method
t_score <- qt(1-(1-0.9)/2,df<- length(y)-1)
lower_90_t <- mean(y) - (t_score)*(sd(y)/sqrt(length(y)))
higher_90_t <- mean(y) + (t_score)*(sd(y)/sqrt(length(y)))
#quicker method
t.test(y,conf.level = 0.9 , alternative = "two.sided")
#answer
CI <- c(lower_90_t,higher_90_t)
CI
#####Question 2
se <- sample_sd/sqrt(n)
t_value <- (mean(y)-100)/(se)
p <- pt(t_value,df = n-1,lower.tail = FALSE)
t.test(y, mu = 100,  alternative = "greater")
#####################
# Problem 2
#####################
expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2023/main/datasets/expenditure.txt", header=T)
t.test(y, mu = mean(y),  alternative = "greater")
t.test(y, mu = 100,  alternative = "greater")
